#include <iostream>
#include <vector>
#include <queue>
#include <fstream>
#include <cstdlib>
#include "bloom.h"

using namespace std;

#define NUMW 8 // width of no. in key

int n, m; // num of vertices, edges
int edge_bfil_arr_size, edge_bfil_num_hash;




int main (int argc, char** argv) {
  //cout << argc << endl;
  
  
  ifstream fs;
  
  
  fstream updatefs; 
  updatefs.open(argv[3]);
  float ratio;
  while (updatefs >> edge_bfil_arr_size >> edge_bfil_num_hash >> bfs_bfil_arr_size >> bfs_bfil_num_hash >> ratio) {
    //cout << edge_bfil_arr_size << " " << edge_bfil_num_hash << " " << bfs_bfil_arr_size << " " << bfs_bfil_num_hash << endl;
  }
  ; // read till end
    
  //cout << "## "<< edge_bfil_arr_size << " " << edge_bfil_num_hash << " " << bfs_bfil_arr_size << " " << bfs_bfil_num_hash << endl;
  updatefs.close();
  //cout << "## "<< edge_bfil_arr_size << " " << edge_bfil_num_hash << " " << bfs_bfil_arr_size << " " << bfs_bfil_num_hash << endl;


  fs.open(argv[1]); // graph
  fs >> n >> m; // n is global
  //cout  << "n:" << n;
  cout << "init: reading file\n";
  BinaryBloomFilter* edge_store_bf = new BinaryBloomFilter(edge_bfil_arr_size, edge_bfil_num_hash, NUMW); 
  int u, v;
  for (int i = 0; i < m; i++) { // m
    fs >> u >> v; // 0 indexed vertices? : assumed 1 indexed
    edge_store_bf->add(u, v); // add edge to BF
  }
  fs.close();
  cout << "init: done reading file\n";
  
  BloomFilter* bfs_out = NULL;
  int l;
  updatefs.open(argv[3], ofstream::out | ofstream::app);
  int b, p = 0, q = 0; // b: bfs out; p: correct result; q: total
  goto this_point;
  for(edge_bfil_arr_size = 100; edge_bfil_arr_size <= 10000; edge_bfil_arr_size += 400) {
    for(edge_bfil_num_hash = 1; edge_bfil_num_hash <= 10; edge_bfil_num_hash += 2) {
      fs.open(argv[1]); // graph
      fs >> n >> m; // n is global      
      edge_store_bf
	= new BinaryBloomFilter(edge_bfil_arr_size, edge_bfil_num_hash, NUMW);
      
      cout << "reading file\n";
      for (int i = 0; i < m; i++) { // m
	fs >> u >> v; // 0 indexed vertices? : assumed 1 indexed
	edge_store_bf->add(u, v); // add edge to BF
      }
      fs.close();
      cout << "done reading file\nrunning bfs\n|";
      //cout << edge_bfil_arr_size << " " << edge_bfil_num_hash << " " << bfs_bfil_arr_size << " " << bfs_bfil_num_hash << " " << endl;
      
      
 	 
      // bfs result in bloomfilter
	  
      bfs_out = BFS2(edge_store_bf, 1); // start node = 1
      //cout << "done bfs\n";
	 
      //fs.open(argv[2]); // testcase file
      //int t, h; // test node, real h
      b = 0; p = 0; q = 0; // b: bfs out; p: correct result; q: total
	  
      //while (fs >> t >> h) {
      l = nodes.size();
      for(int i = 0; i < l; i++) {
	q++;
	b = bfs_out->check(nodes[i]);
	if (b == dists[i]) 
	  p++;
	//cout << nodes[i] << " " << b << " " << dists[i] << endl;
      }
      ratio = p/(float)q;
      //cout << "total: " << q << "; correct: " << p << " ; ratio: " << ratio << endl;
      cout << edge_bfil_arr_size << " " << edge_bfil_num_hash << " " << bfs_bfil_arr_size << " " << bfs_bfil_num_hash << " " << ratio << endl;
	  
      //fs.close();
      //cout << "ddd";
      updatefs << edge_bfil_arr_size << " " << edge_bfil_num_hash << " " << bfs_bfil_arr_size << " " << bfs_bfil_num_hash << " " << ratio << endl;
      delete bfs_out;
      //break;
    this_point:;
      delete edge_store_bf;
      //break;
    }
  }
  updatefs.close();
  return 0;
}

/*
int main (int argc, char** argv) {
  cout << argc << endl;
  if (argc != 7) {
    cout << "run as: <executable> <graph file> <testcase file> <edge_bfil_arr_size> <edge_bfil_num_hash> <bfs_bfil_arr_size> <bfs_bfil_num_hash>" << endl;
    exit(1);
  }
    
  edge_bfil_arr_size = atoi(argv[3]);
  edge_bfil_num_hash = atoi(argv[4]);
  
  bfs_bfil_arr_size = atoi(argv[5]);
  bfs_bfil_num_hash = atoi(argv[6]);
  
  
  ifstream fs;
  fs.open(argv[1]); // graph
  
  int m;
  fs >> n >> m;
  //cout  << "n:" << n;
  BinaryBloomFilter* edge_store_bf = new BinaryBloomFilter(edge_bfil_arr_size, edge_bfil_num_hash, NUMW); 
  int j = 0;
  int u, v;
  //cout << "reading file\n";
  for (int i = 0; i < m; i++) { // m
    fs >> u >> v; // 0 indexed vertices? : assumed 1 indexed
    edge_store_bf->add(u, v); // add edge to BF
  }
  fs.close();
  //cout << "done reading file\nrunning bfs\n";
  //cout << BFS2 (bf, 1); // start BFS on 1
  
  
  // bfs result in bloomfilter
  
  BloomFilter* bfs_out = BFS2(edge_store_bf, 1); // start node = 1
  //cout << "done bfs\n";
  
  fs.open(argv[2]); // testcase file
  int t, h; // test node, real h
  int b, p = 0, q = 0;
  while(fs >> t >> h){
    q++;
    b = bfs_out->check(t);
    if (b == h) 
      p++;
    cout << t << " " << b << " " << h << endl;
  }
  float ratio = p/(float)q;
  //cout << "total: " << q << "; correct: " << p << " ; ratio: " << ratio << endl;
  cout << ratio << endl;
  fs.close();
  
  delete edge_store_bf;
  delete bfs_out;
  
  return 0;
}
*/
